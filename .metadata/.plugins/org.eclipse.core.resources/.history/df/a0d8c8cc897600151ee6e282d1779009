package graph;

import java.util.ArrayList;

public class Graph {
	
	ArrayList<Node> graph = new ArrayList<Node>();
	
	boolean isNodePresent (int nodeId) {
		// Returns true if the node with the given id is present in the graph
		// else return false.
		for ( Node node : graph ) {
			if ( node.getNodeId() == nodeId ) {
				return true;
			}
		}
		return false;
	}
	
	public boolean addNode(int nodeId) {
		// Returns false if the node with the given nodeId is already present.
		// else adds the node to the given graph then creates.
		if ( isNodePresent(nodeId) ) {
			// the node to be added is already present.
			return false;
		}
		graph.add(new Node(nodeId));
		return true;
	}
	
	Node getNode(int nodeId) {
		// throws nodeNotFound expection if the node with the given nodeId is not present
		for(Node node : graph ) {
			if(node.getNodeId() == nodeId) {
				return node;
			}
		}
	}
	
	public boolean addEdge(int nodeIdA, int nodeIdB, double distance) {
		// returns false if atleast one of the node id is not present
		// else adds the undirected edge from both
		// nodeA -> nodeB with distance
		// nodeB -> nodeA with distance
		if( isNodePresent(nodeIdA) == false || isNodePresent(nodeIdB) == false ) {
			// atleast one of the node is not present.
			return false;
		}
		
		return true;
	}
}
